name: 🏆 FUTBIN Price Tracker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Läuft täglich um 02:00 UTC für Dependency-Checks
    - cron: '0 2 * * *'

jobs:
  # === QUALITY CHECKS ===
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
    
    - name: 🎨 Code Formatting Check (Black)
      run: black --check --diff .
    
    - name: 🧹 Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: 🔍 Type Checking (MyPy)
      run: mypy . --ignore-missing-imports
      continue-on-error: true  # Type checking ist noch optional

  # === TESTING ===
  test:
    name: 🧪 Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12]
        exclude:
          # Reduziere Matrix für Performance
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.8
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: 🧪 Run Tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
      env:
        FUTBIN_PLATFORM: ps
        DEBUG: true
    
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  # === SECURITY SCAN ===
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 🔒 Run Security Scan (Bandit)
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o security-report.json
      continue-on-error: true
    
    - name: 🔐 Dependency Vulnerability Check (Safety)
      run: |
        pip install safety
        safety check
      continue-on-error: true

  # === BUILD & PACKAGE ===
  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install Build Tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: 🏗️ Build Package
      run: python -m build
    
    - name: ✅ Check Package
      run: twine check dist/*
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ github.sha }}
        path: dist/

  # === INTEGRATION TESTS ===
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install Package
      run: |
        pip install -e .
        pip install pytest-integration
    
    - name: 🌐 Test FUTBIN Connectivity
      run: |
        python -c "
        from futbin_api import FutbinAPI
        import sys
        
        try:
            with FutbinAPI('ps') as api:
                # Test mit bekannter Player ID
                price = api.get_price_for_platform(231747)  # Mbappé
                if price:
                    print(f'✅ FUTBIN Connectivity OK: {price} Coins')
                else:
                    print('⚠️  FUTBIN Response OK, aber keine Preisdaten')
                    sys.exit(0)  # Nicht als Fehler werten
        except Exception as e:
            print(f'❌ FUTBIN Connectivity Failed: {e}')
            sys.exit(1)
        "
      continue-on-error: true  # FUTBIN könnte temporär nicht verfügbar sein
    
    - name: 📊 Test Excel Export
      run: |
        python -c "
        from main import FutbinPriceTracker
        import os
        
        # Test Excel-Export-Funktionalität
        tracker = FutbinPriceTracker('ps', 'test_data')
        
        # Simuliere Trade
        test_player = {
            'name': 'Test Player',
            'buy_price': 100000,
            'futbin_id': 123456
        }
        
        tracker.record_trade(test_player, 120000)
        
        if os.path.exists('test_data/trades.xlsx'):
            print('✅ Excel Export funktional')
        else:
            print('❌ Excel Export fehlgeschlagen')
            exit(1)
        "

  # === RELEASE ===
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [quality, test, build, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Für Changelog-Generierung
    
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-${{ github.sha }}
        path: dist/
    
    - name: 🏷️ Extract Version
      id: version
      run: |
        VERSION=$(python setup.py --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
    
    - name: 📝 Generate Changelog
      id: changelog
      run: |
        # Vereinfachte Changelog-Generierung
        echo "## 🚀 Version ${{ steps.version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### ✨ Neue Features:" >> RELEASE_NOTES.md
        git log --oneline --grep="feat:" --since="1 month ago" | sed 's/^/- /' >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 🐛 Bugfixes:" >> RELEASE_NOTES.md
        git log --oneline --grep="fix:" --since="1 month ago" | sed 's/^/- /' >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### 📊 Vollständige Änderungen:" >> RELEASE_NOTES.md
        echo "Siehe [Commit-Verlauf](https://github.com/${{ github.repository }}/commits/main)" >> RELEASE_NOTES.md
    
    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: 🏆 FUTBIN Price Tracker v${{ steps.version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  # === NOTIFICATION ===
  notify:
    name: 📢 Benachrichtigung
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: always()
    
    steps:
    - name: 📊 Job Status Summary
      run: |
        echo "## 📊 CI/CD Results Summary" > status.md
        echo "" >> status.md
        echo "| Job | Status |" >> status.md
        echo "|-----|--------|" >> status.md
        echo "| Quality Check | ${{ needs.quality.result }} |" >> status.md
        echo "| Tests | ${{ needs.test.result }} |" >> status.md  
        echo "| Build | ${{ needs.build.result }} |" >> status.md
        echo "" >> status.md
        echo "**Commit**: \"${{ github.sha }}\"" >> status.md
        echo "**Branch**: \"${{ github.ref_name }}\"" >> status.md
        echo "**Triggered by**: ${{ github.event_name }}" >> status.md
        
        cat status.md
    
    - name: 🔔 Discord Notification (bei Failure)
      if: failure() && github.event_name == 'push'
      run: |
        echo "Hier würde Discord-Benachrichtigung bei CI-Failure gesendet"
        # Webhook-Integration kann ich hier implementiert werden
